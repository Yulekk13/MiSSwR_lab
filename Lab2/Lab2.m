function [allData, scenario, sensors] = rondo_na_wodzislawskiej()
%rondo_na_wodzislawskiej - Returns sensor detections
%    allData = rondo_na_wodzislawskiej returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = rondo_na_wodzislawskiej optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 24.2 (R2024b) and Automated Driving Toolbox 24.2 (R2024b).
% Generated on: 28-Mar-2025 22:40:29

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

% Add sensors to scenario
addSensors(scenario, sensors, egoVehicle.ActorID);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    isValidINSTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        if ~isa(sensor,'insSensor')
            poses = targetPoses(scenario,sensor.SensorIndex);
        end
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            if isa(sensor,'ultrasonicDetectionGenerator')
                [objectDets, isValidTime(sensorIndex)] = sensor(poses, time);
                numObjects = length(objectDets);
            else
                [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            end
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor();
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        elseif strcmp(type, 'INSMeasurement')
            insMeasCurrent = sensor(actorState, time);
            insMeas = [insMeas; insMeasCurrent]; %#ok<AGROW>
            isValidINSTime(sensorIndex) = true;
        end
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime) || any(isValidINSTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = drivingRadarDataGenerator('SensorIndex', 1, ...
    'MountingLocation', [3.7 0 0.2], ...
    'RangeLimits', [0 100], ...
    'TargetReportFormat', 'Detections', ...
    'Profiles', profiles);
sensors{2} = visionDetectionGenerator('SensorIndex', 2, ...
    'SensorLocation', [1.9 0], ...
    'MaxRange', 50, ...
    'MaxSpeed', 50, ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([500 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{3} = visionDetectionGenerator('SensorIndex', 3, ...
    'SensorLocation', [-1 0], ...
    'Yaw', -180, ...
    'MaxRange', 100, ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([1500 1814.81],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
numSensors = 3;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario('GeoReference', [50.04129 18.6825165 0], ...
    'VerticalAxis', 'Y');

% Add all road segments
roadCenters = [-41.841611862973 0.12251632313183 -0.00013697445003961;
    -40.83157765664 -1.1677578466403 -0.00013054722924133;
    -39.620966249464 -2.391295393567 -0.00012326831404863;
    -38.216939956456 -3.4034973176486 -0.00011517716407283;
    -36.669642676032 -4.1709941652604 -0.0001065686602475];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Wodzisławskie');

roadCenters = [-36.669642676032 -4.1709941652604 -0.0001065686602475;
    -34.363019414218 -4.7938966751062 -9.418685826823e-05;
    -31.97043107655 -4.8717723948406 -8.1830023149543e-05;
    -29.620820293098 -4.4046205000708 -7.0167785171105e-05;
    -27.443129761226 -3.4146863582982 -5.9837672377716e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Wodzisławskie');

roadCenters = [-27.443129761226 -3.4146863582982 -5.9837672377716e-05;
    -25.516157922528 -1.924215775324 -5.1229266239572e-05;
    -23.990337598959 -0.022192229993133 -4.5028753823322e-05;
    -22.95163040108 2.1690314553056 -4.1582029334242e-05;
    -22.507486833741 4.7606853154076 -4.1412746448977e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Wodzisławskie');

roadCenters = [-22.507486833741 4.7606853154076 -4.1412746448977e-05;
    -22.528967848009 6.9630366478924 -4.3514621853369e-05;
    -23.15217561841 9.2988663892374 -4.8720944390013e-05;
    -24.305476703598 11.423361855033 -5.6456568596985e-05;
    -25.910073579116 13.225293139769 -6.6244716433239e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Wodzisławskie');

roadCenters = [-25.910073579116 13.225293139769 -6.6244716433239e-05;
    -28.123561057436 14.726907446714 -7.8896071149082e-05;
    -30.652240897978 15.616760223832 -9.2643426381933e-05;
    -33.324192341783 15.828112924108 -0.00010653815256312;
    -35.960331072459 15.360964556512 -0.00011968565879439;
    -38.875849515115 14.048472556375 -0.00013372839618331];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Wodzisławskie');

roadCenters = [-38.875849515115 14.048472556375 -0.00013372839618331;
    -40.158109854782 12.824953537587 -0.00013907671839153;
    -41.576479859904 11.067532546798 -0.00014485288935795;
    -42.586537853577 9.0542799936427 -0.00014832626466443];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Wodzisławskie');

roadCenters = [-42.586537853577 9.0542799936427 -0.00014832626466443;
    -43.066501195165 7.2968520256284 -0.00014928783466761;
    -43.224111234083 5.4726835800142 -0.00014852374629593;
    -43.066530449166 3.6596355825749 -0.00014616055981653;
    -42.593758166322 1.9022000108567 -0.00014222583828749;
    -41.841611862973 0.12251632313183 -0.00013697445003961];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Rondo Wodzisławskie');

roadCenters = [-42.586537853577 9.0542799936427 -0.00014832626466443;
    -55.674139594855 6.0178248713442 -0.00024534961144917;
    -60.695714685516 4.7721049977983 -0.00029001433521847;
    -67.458052296032 -0.21091181098701 -0.0003560335909524];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Wodzisławska');

roadCenters = [-67.458052296032 -0.21091181098701 -0.0003560335909524;
    -59.972279595817 -1.5680051718422 -0.00028159117221205;
    -54.871908139839 -1.0230335556829 -0.00023565260829328;
    -44.563718420802 -0.12216740572929 -0.00015537653921365;
    -41.841611862973 0.12251632313183 -0.00013697445003961];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Wodzisławska');

roadCenters = [7.7722909436449 23.41389153151 -4.7735753460287e-05;
    -10.043097801739 18.886839870515 -3.5876809032942e-05;
    -14.126244001315 17.474229827831 -3.9568467675721e-05;
    -23.309749762141 14.148489043573 -5.8214574649718e-05;
    -25.910073579116 13.225293139769 -6.6244716433239e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Wodzisławska');

roadCenters = [-22.507486833741 4.7606853154076 -4.1412746448977e-05;
    -11.504450376206 10.800431824701 -1.9506600714259e-05;
    -6.167700331281 13.525554633177 -1.7327640502884e-05;
    7.7722909436449 23.41389153151 -4.7735753460287e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Wodzisławska');

roadCenters = [-29.821568054467 -35.193043599592 -0.00016675113219122;
    -27.049234242611 -21.934459636281 -9.498982101519e-05;
    -27.292761181203 -15.894677197544 -7.8099785958408e-05;
    -27.53626972359 -6.3845231128535 -6.2521475471922e-05;
    -27.443129761226 -3.4146863582982 -5.9837672377716e-05];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Jarosława Dąbrowskiego');

roadCenters = [-36.669642676032 -4.1709941652604 -0.0001065686602475;
    -34.298626331751 -16.951320545807 -0.00011458287717581;
    -33.603805044172 -22.357095966619 -0.0001275637723186;
    -29.821568054467 -35.193043599592 -0.00016675113219122];
laneSpecification = lanespec(1);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Jarosława Dąbrowskiego');

roadCenters = [-39.6 31.3 0;
    -36.2 15.5 0];
marking = [laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Dashed')];
laneSpecification = lanespec(1, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [-64.5 0.6 0;
    -76 -2.8 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

roadCenters = [-29.7 -42 0;
    -30 -30 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road2');

roadCenters = [15.7 26.6 0;
    0.4 20.1 0];
laneSpecification = lanespec(2);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road3');

roadCenters = [-21.5 -10.29 0;
    -41.35 -11.9 0];
roadWidth = 3;
road(scenario, roadCenters, roadWidth, 'Name', 'Road4');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-27.67 -38.8 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-27.67 -38.8 0.01;
    -27.79 -30.93 0;
    -27.29 -27.03 0;
    -27.09 -23.53 0;
    -26.79 -19.93 0;
    -27.09 -16.63 0;
    -27.19 -13.23 0;
    -27.29 -9.53 0;
    -27.29 -7.53 0;
    -27.19 -5.43 0;
    -26.99 -3.13 0;
    -25.39 -1.03 0;
    -23.49 1.37 0;
    -22.39 4.97 0;
    -22.59 6.77 0;
    -23.19 9.37 0;
    -24.29 11.67 0;
    -26.09 13.57 0;
    -28.09 14.77 0;
    -30.59 15.67 0;
    -33.69 16.07 0;
    -35.99 15.67 0;
    -38.79 14.47 0;
    -40.19 13.27 0;
    -41.49 11.57 0;
    -42.29 9.77 0;
    -43.39 8.47 0;
    -44.79 8.37 0;
    -47.79 7.87 0;
    -52.79 6.47 0;
    -56.39 5.87 0;
    -60.69 4.47 0;
    -63.89 3.07 0;
    -67.49 1.77 0;
    -71.59 0.77 0];
speed = [15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15;15];
waittime = [0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];
smoothTrajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-72.94 -3.88 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car1');
waypoints = [-72.94 -3.88 0.01;
    -66.6 -2.28 0.01;
    -63.39 -1.43 0.01;
    -59.17 -1.43 0.01;
    -54.61 -1.1 0.01;
    -51.31 -0.67 0.01;
    -46.42 -0.17 0.01;
    -43.88 0.09 0.01;
    -42.19 0 0.01;
    -40.5 -1.1 0.01;
    -38.9 -2.36 0.01;
    -37.46 -3.46 0.01;
    -35.18 -4.31 0.01;
    -33.66 -4.73 0.01;
    -31.38 -4.81 0.01;
    -29.1 -4.22 0.01;
    -25.73 -2.03 0.01;
    -23.7 1.1 0.01;
    -22.6 3.8 0.01;
    -20.83 5.83 0.01;
    -17.45 7.43 0.01;
    -13.73 9.54 0.01;
    -9.93 11.4 0.01;
    -3.8 14.7 0;
    0.7 18.1 0;
    8.4 21.5 0;
    15.2 24 0;
    15.6 24.5 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30];
smoothTrajectory(car1, waypoints, speed);

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-24.76 -10.2 0.01], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Yaw', -174, ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'Pedestrian');

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end

